{
  "version": 3,
  "sources": ["../../../app/routes/copy-and-paste.text-faces.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/copy-and-paste.text-faces.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/copy-and-paste.text-faces.tsx\");\n  import.meta.hot.lastModified = \"1731046171314.2798\";\n}\n// REMIX HMR END\n\nimport { json, Link, redirect, useLoaderData, useOutletContext } from \"@remix-run/react\";\nimport cloudflareR2API from \"../client/components/api/cloudflareR2API\";\nimport localforage from \"localforage\";\nimport { useMemo, useState } from \"react\";\nimport CopyPaste from \"../client/components/ui/CopyPasteTextbox\";\nimport SectionMenu from \"../client/components/navigation/SectionMenu\";\nimport useManageCopiedMsg from \"../client/components/hooks/useManageCopiedMsg\";\nimport useDisplayLimitOnScroll from \"../client/components/hooks/useDisplayLimitOnScroll\";\nexport const meta = () => {\n  return [{\n    title: \"\u2728 Text Faces (\uFF89\u25D5\u30EE\u25D5)\uFF89*:\uFF65\uFF9F\u2727 - Copy and Paste Cute and Creative Text Emoticons! \uD83D\uDC80\uD83C\uDF89\"\n  }, {\n    name: \"description\",\n    content: \"\u2B50 (\uFF89\u25D5\u30EE\u25D5)\uFF89*:\uFF65\uFF9F\u2727 Discover and share the cutest and most creative text faces! \u0CA5_\u0CA5 Easily copy and paste a variety of unique emoticons for all your messages and social media posts. Express yourself with our extensive collection of fun text faces! \uD83D\uDD25\uD83C\uDF73\uD83D\uDC69\u200D\uD83C\uDF73 Emoji Kitchen \uD83D\uDC40\uD83D\uDC4D\uD83E\uDEF6\uD83C\uDFFB\u2714\uFE0F\uD83D\uDE4F\uD83D\uDE80\uD83E\uDD29\"\n  }];\n};\nexport const loader = async () => {\n  let textFaces = null;\n  let facesInfo = null;\n  try {\n    const response = await cloudflareR2API.get(`/emojis/text_faces.json`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => response.data);\n    if (response) {\n      textFaces = response;\n    }\n  } catch (error) {\n    console.error(\"Error fetching text faces:\", error);\n  }\n  try {\n    const response = await cloudflareR2API.get(`/emojis/faces_info.json`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => response.data);\n    if (response) {\n      facesInfo = response;\n    }\n  } catch (error) {\n    console.error(\"Error fetching faces info:\", error);\n  }\n  if (!textFaces || Object.keys(textFaces).length === 0) return redirect(\"/404\");\n  return json({\n    textFaces,\n    facesInfo\n  });\n};\nexport async function clientLoader({\n  serverLoader\n}) {\n  const cacheKey = \"textFaces\";\n  const cacheKey1 = \"facesInfo\";\n  try {\n    const textFaces = await localforage.getItem(cacheKey);\n    const facesInfo = await localforage.getItem(cacheKey1);\n    if (textFaces && facesInfo) {\n      return {\n        textFaces,\n        facesInfo\n      };\n    } else {\n      const {\n        textFaces,\n        facesInfo\n      } = await serverLoader();\n      await localforage.setItem(cacheKey, textFaces);\n      await localforage.setItem(cacheKey1, facesInfo);\n      return {\n        textFaces,\n        facesInfo\n      };\n    }\n  } catch (error) {\n    console.error(\"Error fetching cached data:\", error);\n  }\n}\nexport default function TextFaces() {\n  _s();\n  const {\n    textFaces,\n    facesInfo\n  } = useLoaderData();\n  const {\n    isCopied,\n    setIsCopied\n  } = useManageCopiedMsg();\n  const [displayLimit, setDisplayLimit] = useState(2);\n  useDisplayLimitOnScroll({\n    displayLimit,\n    setDisplayLimit\n  });\n  const {\n    setCopyText,\n    displayCopyText,\n    setDisplayCopyText,\n    textareaIsHidden,\n    setTextareaIsHidden\n  } = useOutletContext();\n  const textFacesEntries = useMemo(() => Object.entries(textFaces), [textFaces]);\n  const facesInfoEntries = useMemo(() => Object.entries(facesInfo), [facesInfo]);\n  return <div className=\"flex flex-col gap-5 justify-center items-center\">\n      <header>\n        <h1 className=\"mt-10 font-lora text-center leading-loose text-purple-700 mb-5 text-2xl mx-5 sm:text-3xl\">\n          Copy and Paste Text Faces{\" \"}\n          <span className=\"whitespace-nowrap\">(\uFF89\u25D5\u30EE\u25D5)\uFF89*:\uFF65\uFF9F\u2727</span>\n          <div id=\"text-faces\" className=\"-translate-y-32\"></div>\n        </h1>\n      </header>\n      <main onMouseEnter={() => setDisplayLimit(1000)} onTouchStart={() => setDisplayLimit(1000)} className=\"flex flex-col max-w-[1200px] gap-20 font-nunito justify-center items-center\">\n        <SectionMenu object={textFaces} />\n        <div className=\"flex flex-col gap-14\">\n          {textFacesEntries.map(([key, value], index) => {\n          return index < displayLimit ? <div key={`${key}-${index}`} className=\"-translate-y-6 flex flex-col  lg:overflow-hidden pt-10 sm:px-10 scrollbar-thin xl:border-2 rounded-lg border-slate-100 scrollbar-thumb-rose-700 scrollbar-track-rose-300\">\n                <h2 className=\"flex capitalize mb-8 w-full text-rose-400 justify-center items-center text-center text-2xl\">\n                  {key.split(\"-\").join(\" \")} Faces\n                </h2>\n                <ul className=\"grid sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-5 gap-5 text-2xl justify-center items-center\">\n                  {value.map((face, index) => <li className=\"flex sm:whitespace-nowrap justify-center items-center\" title={face} key={`${key}-${face}-${index}`}>\n                      <button aria-label={`Copy ${face} face to clipboard`} onClick={() => {\n                  setIsCopied(face);\n                  setCopyText(face);\n                }} className={`hover:text-slate-800 max-w-[13em] sm:max-w-auto flex text-center hover:scale-110 sm:overflow-visible text-slate-600 border-slate-300 hover:border-slate-400 w-full justify-center items-center border-2 sm:px-5 py-4 rounded-md`}>\n                        <span className=\"flex\">\n                          {isCopied === face.replace(/\\s*\\n\\s*/g, \"\") ? \"\u2727\uFF65\uFF9F Copied! \uFF65\uFF9F\u2727\" : face.split(\"  \").join(\"\")}\n                        </span>\n                      </button>\n                      <div id={key} className=\"-translate-y-44\"></div>\n                    </li>)}\n\n                  <li className=\"sm:col-span-2 md:col-span-3 xl:col-span-5 w-full justify-center items-center flex mt-10 mb-20 text-xl\">\n                    <Link aria-label=\"Scroll To Menu\" className=\"text-sky-600 translate-y-8 text-center hover:text-sky-500 flex gap-1 sm:gap-5\" to=\"#text-faces\">\n                      <span className=\"scale-x-[-1]\">\u261D\uFE0F\u261D\uD83C\uDFFB\u261D\uD83C\uDFFC</span>Scroll To Menu\n                      <span>\u261D\uD83C\uDFFD\u261D\uD83C\uDFFE\u261D\uD83C\uDFFF</span>\n                    </Link>\n                  </li>\n                </ul>\n              </div> : null;\n        })}\n        </div>\n        <ul className=\"flex gap-10 mb-40 flex-col mx-5\">\n          {facesInfoEntries.map(([key, value], index) => <li key={`${key}-${index}`} className=\"flex flex-col gap-8 text-center text-lg text-purple-800 justify-center items-center\">\n              <h3 className=\"font-lora capitalize text-2xl text-purple-800\">\n                {key}\n              </h3>\n              <p className=\"font-lato text-xl leading-loose tracking-widest\">\n                {value}\n              </p>\n            </li>)}\n          <li className=\"sm:col-span-2 md:col-span-3 xl:col-span-5 w-full justify-center items-center flex mt-10 mb-20 text-xl\">\n            <Link className=\"text-sky-600 text-center hover:text-sky-500 flex gap-1 sm:gap-5\" to=\"#text-faces\">\n              <span className=\"scale-x-[-1]\">\u261D\uFE0F\u261D\uD83C\uDFFB\u261D\uD83C\uDFFC</span>Scroll To Menu\n              <span>\u261D\uD83C\uDFFD\u261D\uD83C\uDFFE\u261D\uD83C\uDFFF</span>\n            </Link>\n          </li>\n        </ul>\n        <CopyPaste isHidden={textareaIsHidden} setIsHidden={setTextareaIsHidden} displayCopyText={displayCopyText} setDisplayCopyText={setDisplayCopyText} />\n      </main>\n    </div>;\n}\n_s(TextFaces, \"VHLbRVQ71TYoZXz47vshPyAApw0=\", false, function () {\n  return [useLoaderData, useManageCopiedMsg, useDisplayLimitOnScroll, useOutletContext];\n});\n_c = TextFaces;\nvar _c;\n$RefreshReg$(_c, \"TextFaces\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "localforage", "textFaces", "facesInfo", "index"]
}
