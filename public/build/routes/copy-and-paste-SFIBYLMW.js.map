{
  "version": 3,
  "sources": ["../../../app/routes/copy-and-paste.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/copy-and-paste.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/copy-and-paste.tsx\");\n  import.meta.hot.lastModified = \"1731046171314.3684\";\n}\n// REMIX HMR END\n\nimport { Outlet, useOutletContext } from \"@remix-run/react\";\nexport const meta = () => {\n  return [{\n    title: \"\u2728 Copy and paste Cute and Creative Text Emoticons! - Text Faces (\uFF89\u25D5\u30EE\u25D5) \u2026 \uD83D\uDC80\uD83C\uDF89\"\n  }, {\n    name: \"description\",\n    content: \"\uD83D\uDE0A\u2B50 Discover a variety of cute and creative text emoticons and text faces to express yourself in unique ways! From happy smiles (\u2565\uFE4F\u2565) to powerful flexes (\u0E07'\u0300-'\u0301)\u0E07, our collection has something for every mood. Explore and copy your favorites! \uD83D\uDD25\uD83C\uDF73\uD83D\uDC69\u200D\uD83C\uDF73 Emoji Kitchen \uD83D\uDC40\uD83D\uDC4D\uD83E\uDEF6\uD83C\uDFFB\u2714\uFE0F\uD83D\uDE4F\uD83D\uDE80\uD83E\uDD29\"\n  }];\n};\nexport default function CopyPaste() {\n  _s();\n  const {\n    copyText,\n    setCopyText,\n    displayCopyText,\n    setDisplayCopyText,\n    textareaIsHidden,\n    setTextareaIsHidden\n  } = useOutletContext(); //I've setup an outlet context in root route, so it can be accessed in all routes, but since I have another context here I need to pass the data again.\n\n  return <Outlet context={{\n    copyText,\n    setCopyText,\n    displayCopyText,\n    setDisplayCopyText,\n    textareaIsHidden,\n    setTextareaIsHidden\n  }} />;\n}\n_s(CopyPaste, \"PLgLjvbeZWS0rHN5gLP7pqfikTE=\", false, function () {\n  return [useOutletContext];\n});\n_c = CopyPaste;\nvar _c;\n$RefreshReg$(_c, \"CopyPaste\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAyCS;AAxCT,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,oCAAsC,EAAE;AAAA,EACjF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA+B;AAC/B,cAAY,IAAI,eAAe;AACjC;AAIO,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,OAAO;AAAA,EACT,GAAG;AAAA,IACD,MAAM;AAAA,IACN,SAAS;AAAA,EACX,CAAC;AACH;AACe,SAAR,YAA6B;AAClC,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI,iBAAiB;AAErB,SAAO,mDAAC,UAAO,SAAS;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,KAPO;AAAA;AAAA;AAAA;AAAA,SAOJ;AACL;AACA,GAAG,WAAW,gCAAgC,OAAO,WAAY;AAC/D,SAAO,CAAC,gBAAgB;AAC1B,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,WAAW;AAE5B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
