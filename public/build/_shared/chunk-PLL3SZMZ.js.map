{
  "version": 3,
  "sources": ["../../../app/client/components/layout/ComboImage.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/client/components/layout/ComboImage.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/client/components/layout/ComboImage.tsx\");\n  import.meta.hot.lastModified = \"1731046171309.1116\";\n}\n// REMIX HMR END\n\nimport { useEffect, useState } from \"react\";\nimport Icon from \"../utils/other/Icon\";\nimport useManageCopiedMsg from \"../hooks/useManageCopiedMsg\";\n\n// Function to copy an image Blob to clipboard using Clipboard API\nconst copyImgToClipboard = async (imageBlob, setIsCopied) => {\n  try {\n    if (navigator.clipboard && ClipboardItem) {\n      const clipboardItem = new ClipboardItem({\n        \"image/png\": imageBlob\n      });\n      await navigator.clipboard.write([clipboardItem]);\n      setIsCopied(\"true\");\n      setTimeout(() => setIsCopied(\"\"), 2000); // Reset state after 2 seconds\n    } else {\n      throw new Error(\"Clipboard API or ClipboardItem is not supported\");\n    }\n  } catch (clipboardError) {\n    if (clipboardError instanceof Error) {\n      console.error(\"Failed to write to clipboard:\", clipboardError.message);\n    } else {\n      console.error(\"Failed to write to clipboard: Unknown error\");\n    }\n    setIsCopied(\"\");\n  }\n};\n\n// Displays the combos for the selected emojis\nfunction ComboImage({\n  firstEmoji,\n  secondEmoji,\n  emojiData,\n  thirdDiceRoll,\n  setSecondEmoji,\n  menuStyle,\n  bottomMenuStyle,\n  containerStyle\n}) {\n  _s();\n  const [filteredCombos, setFilteredCombos] = useState([]);\n  const [imageBlobs, setImageBlobs] = useState(new Map());\n  const {\n    isCopied,\n    setIsCopied\n  } = useManageCopiedMsg();\n  useEffect(() => {\n    // If either emoji is missing, clear the combos and image blobs\n    if (!firstEmoji || !secondEmoji) {\n      setFilteredCombos([]);\n      setImageBlobs(new Map()); // Clear image blobs\n      return;\n    }\n\n    // Function to fetch an image and store its blob in the state\n    const fetchAndStoreImage = async url => {\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        const blob = await response.blob();\n        if (blob) {\n          setImageBlobs(prev => new Map(prev).set(url, blob));\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch image:\", error);\n      }\n    };\n\n    // Function to filter emoji combos\n    const filterComboSet = (firstUnicode, secondUnicode) => {\n      return emojiData?.combos?.filter(combo => combo.baseUnicode === firstUnicode && combo.unicode.endsWith(secondUnicode) || combo.baseUnicode === secondUnicode && combo.unicode.endsWith(firstUnicode));\n    };\n\n    // Normalize and prepare emoji unicode\n    const normalizeUnicode = emoji => {\n      let baseUnicode = emoji.split(\"~\")[0];\n      if (baseUnicode.length >= 9) {\n        baseUnicode = \"u\" + baseUnicode.split(\"-\").join(\"-u\");\n      }\n      return baseUnicode;\n    };\n\n    // Initialize base unicode values\n    let firstEmojiBaseUnicode = normalizeUnicode(firstEmoji);\n    let secondEmojiBaseUnicode = normalizeUnicode(secondEmoji);\n\n    // Helper function to update combos\n    const updateCombos = (firstUnicode, secondUnicode) => {\n      const combos = filterComboSet(firstUnicode, secondUnicode);\n      setFilteredCombos([...new Set(combos)]);\n      return combos;\n    };\n\n    // Try different combinations\n    const tryCombos = () => {\n      let combos = updateCombos(firstEmojiBaseUnicode, secondEmojiBaseUnicode);\n      if (combos?.length === 0) {\n        firstEmojiBaseUnicode += \"-ufe0f\";\n        combos = updateCombos(firstEmojiBaseUnicode, secondEmojiBaseUnicode);\n      }\n      if (combos?.length === 0) {\n        firstEmojiBaseUnicode = firstEmojiBaseUnicode.slice(0, -6);\n        secondEmojiBaseUnicode += \"-ufe0f\";\n        combos = updateCombos(firstEmojiBaseUnicode, secondEmojiBaseUnicode);\n      }\n      if (combos?.length === 0) {\n        firstEmojiBaseUnicode += \"-ufe0f\";\n        combos = updateCombos(firstEmojiBaseUnicode, secondEmojiBaseUnicode);\n      }\n      if (combos?.length === 0) {\n        firstEmojiBaseUnicode = firstEmojiBaseUnicode.slice(0, -6);\n        const temp = secondEmojiBaseUnicode.split(\"-\")[0];\n        secondEmojiBaseUnicode = `${temp}_${firstEmojiBaseUnicode}-ufe0f`;\n        firstEmojiBaseUnicode = temp;\n        combos = updateCombos(firstEmojiBaseUnicode, secondEmojiBaseUnicode);\n      }\n      if (combos?.length === 0) {\n        const temp = firstEmojiBaseUnicode;\n        firstEmojiBaseUnicode = secondEmojiBaseUnicode.split(\"_\")[1];\n        secondEmojiBaseUnicode = `${firstEmojiBaseUnicode}_${temp}`;\n        combos = updateCombos(firstEmojiBaseUnicode, secondEmojiBaseUnicode);\n      }\n      if (combos?.length === 0) {\n        firstEmojiBaseUnicode = firstEmojiBaseUnicode.slice(0, -6);\n        secondEmojiBaseUnicode = `${firstEmojiBaseUnicode}_${secondEmojiBaseUnicode.split(\"_\")[1]}-ufe0f`;\n        combos = updateCombos(firstEmojiBaseUnicode, secondEmojiBaseUnicode);\n      }\n      if (combos?.length === 0) {\n        firstEmojiBaseUnicode += \"-ufe0f\";\n        secondEmojiBaseUnicode = `${firstEmojiBaseUnicode}_${secondEmojiBaseUnicode.split(\"_\")[1]}`;\n        combos = updateCombos(firstEmojiBaseUnicode, secondEmojiBaseUnicode);\n      }\n    };\n\n    // Try different combinations\n    tryCombos();\n\n    // Handle the case when no combinations are found\n    let combos = filterComboSet(firstEmojiBaseUnicode, secondEmojiBaseUnicode);\n    if (combos?.length === 0) {\n      firstEmojiBaseUnicode = normalizeUnicode(secondEmoji);\n      secondEmojiBaseUnicode = normalizeUnicode(firstEmoji);\n      tryCombos();\n    }\n    combos = filterComboSet(firstEmojiBaseUnicode, secondEmojiBaseUnicode);\n    if (combos?.length === 0) {\n      firstEmojiBaseUnicode = normalizeUnicode(secondEmoji).replace(/u00/g, \"u\");\n      secondEmojiBaseUnicode = normalizeUnicode(firstEmoji).replace(/u00/g, \"u\");\n      tryCombos();\n    }\n    combos = filterComboSet(firstEmojiBaseUnicode, secondEmojiBaseUnicode);\n    if (combos?.length === 0) {\n      firstEmojiBaseUnicode = normalizeUnicode(firstEmoji).replace(/u00/g, \"u\");\n      secondEmojiBaseUnicode = normalizeUnicode(secondEmoji).replace(/u00/g, \"u\");\n      tryCombos();\n    }\n\n    // Fetch and store image if a valid combo is found\n    combos = filterComboSet(firstEmojiBaseUnicode, secondEmojiBaseUnicode);\n    if (combos && combos?.length > 0) {\n      const imageUrl = `https://www.gstatic.com/android/keyboard/emojikitchen/${combos[0]?.code}/${combos[0]?.baseUnicode}/${combos[0]?.unicode}.png`;\n      fetchAndStoreImage(imageUrl);\n    }\n\n    // If no valid combo is found, clear the second emoji with a delay\n    if (combos && combos?.length > 2 || combos?.length === 0) {\n      setTimeout(() => setSecondEmoji(\"\"), 500);\n    }\n  }, [firstEmoji, secondEmoji, setSecondEmoji, setFilteredCombos, emojiData, setImageBlobs]);\n  const handleCopyClick = async () => {\n    if (filteredCombos.length > 0 && Object.values(filteredCombos[0]).length > 0) {\n      const imageUrl = `https://www.gstatic.com/android/keyboard/emojikitchen/${filteredCombos[0]?.code}/${filteredCombos[0]?.baseUnicode}/${filteredCombos[0]?.unicode}.png`;\n      const blob = imageBlobs.get(imageUrl);\n      if (blob) {\n        await copyImgToClipboard(blob, setIsCopied);\n      } else {\n        console.error(\"Image blob not found\");\n      }\n    } else {\n      console.error(\"No combo available to copy\");\n    }\n  };\n  return <div className={`flex relative justify-center  items-center ${containerStyle}`}>\n      <div className=\"w-12 h-12\">\n        {filteredCombos.length > 0 && Object.values(filteredCombos[0]).length > 0 && <>\n              <img className={`${isCopied ? \"opacity-0\" : \"opacity-1\"} flex w-12 md:w-20 mt-1 `} key={`${filteredCombos[0]?.unicode}-${filteredCombos[0]?.baseUnicode}-${filteredCombos[0]?.code}-combo-img`} loading=\"lazy\" alt={`Combination of two emojis ${filteredCombos[0]?.unicode}`} src={`https://www.gstatic.com/android/keyboard/emojikitchen/${filteredCombos[0]?.code}/${filteredCombos[0]?.baseUnicode}/${filteredCombos[0]?.unicode}.png`} />\n              {isCopied && <h2 className=\"text-rose-500 absolute font-nunito text-lg py-[1em] -translate-y-14 -translate-x-2\">\n                  Copied!\n                </h2>}\n            </>}\n      </div>\n      <div className={`absolute flex  ${menuStyle}`}>\n        <button onClick={handleCopyClick} aria-label=\"Copy Emoji Combo\" className=\"flex hover:scale-110\">\n          <Icon icon=\"copyPhotoIcon\" customStyle=\"fill-rose-400 w-7\" title=\"Copy Emoji As PNG Image\" />\n        </button>\n        <button onClick={thirdDiceRoll} aria-label=\"Random Emoji\" className=\"flex hover:scale-110\">\n          <Icon icon=\"dice\" customStyle=\"fill-rose-400 w-7\" title=\"Random Second Emoji\" />\n        </button>\n      </div>\n      <div className={`absolute  flex  ${bottomMenuStyle}`}>\n        <button aria-label=\"Deselect Emoji\" className=\"flex hover:scale-110\" onClick={() => setSecondEmoji(\"\")}>\n          <Icon icon=\"deselect\" customStyle=\"fill-rose-400 w-7\" title=\"Deselect Emoji\" />\n        </button>\n        {/* <button\n          onClick={handleCopyClick}\n          aria-label=\"Copy Emoji Combo as text\"\n          className=\"flex hover:scale-110\"\n         >\n          <Icon\n            icon=\"copy\"\n            customStyle=\"fill-rose-400 w-7\"\n            title=\"Copy Emoji As Text\"\n          />\n         </button> */}\n      </div>\n    </div>;\n}\n_s(ComboImage, \"6AXVOnIkRNAMmpS6d7P/mYKUv+0=\", false, function () {\n  return [useManageCopiedMsg];\n});\n_c = ComboImage;\nexport default ComboImage;\nvar _c;\n$RefreshReg$(_c, \"ComboImage\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["combos"]
}
